#################################
#           Animations         #
#################################

# fly-in maximize minimize slide-in-center slide-out-center slide-left slide right slide-down slide-up squeeze squeeze-bottom zoom

#################################

animations = true;
#change animation speed of windows
animation-stiffness-in-tag = 200;
animation-stiffness-tag-change = 300;
animation-window-mass = 0.3;
animation-dampening = 15;
animation-clamping = false;

animation-for-open-window = "fly-in";
animation-for-unmap-window = "squeeze-bottom";
animation-for-transient-window = "slide-down";

#set animation for windows being transitioned out while changings tags
animation-for-prev-tag = "slide-out-center";
enable-fading-prev-tag = true;
animation-for-next-tag = "slide-in-center";
enable-fading-next-tag = true;

#################################
#             Shadows           #
#################################

shadow = true;
shadow-radius = 30;
shadow-opacity = .75;
shadow-offset-x = -30;
shadow-offset-y = -30;
shadow-color = "#0a0708"
shadow-exclude = [
  "class_g *?= 'slop'",
  "_GTK_FRAME_EXTENTS@:c"
];

# Specify a list of conditions of windows that should have no shadow painted over
# clip-shadow-above = []

# Crop shadow of a window fully on a particular monitor to that monitor. This is
crop-shadow-to-monitor = true

#################################
#           Fading              #
#################################
fading = true;
fade-in-step = 0.023;
fade-out-step = 0.035;
fade-delta = 4

# fade-exclude = []

# Do not fade destroyed ARGB windows with WM frame. Workaround of bugs in Openbox, Fluxbox, etc.
# no-fading-destroyed-argb = false

#################################
#   Transparency / Opacity      #
#################################

# Opacity of window titlebars and borders. (0.1 - 1.0, disabled by default)
frame-opacity = 0.6

# Let inactive opacity set by -i override the '_NET_WM_WINDOW_OPACITY' values of windows.
inactive-opacity-override = false;

opacity-rule = [
	"90:class_g     = 'Spotify'",
	"95:class_g     = 'Thunar'",
	"95:class_g     = 'obsidian'",
	"95:name     = 'Start Page - Vivaldi'",
	"95:name     = 'Vivaldi - Vivaldi'",
  "100:fullscreen",
];

focus-exclude = [
	"class_g = 'Cairo-clock'" ,
	"class_g = 'awesome'" ,
	"class_g = 'Google-chrome'" ,
  "window_type = 'dock'",
  "window_type = 'notification'",
  "window_type = 'dropdown_menu'",
  "window_type = 'popup_menu'",
	"name = 'ArchLinux Logout'",
	"class_g = 'Rofi'",
	"class_g = 'MPlayer'",
];

# Use fixed inactive dim value, instead of adjusting according to window opacity.
inactive-dim-fixed = 0.05
inactive-dim = 0.05;

#################################
#           Corners             #
#################################

# Sets the radius of rounded window corners. When > 0, the compositor will
# round the corners of windows. Does not interact well with
# `transparent-clipping`.
corner-radius = 2;
rounded-corners-exclude = [
 "window_type = 'dock'",
 "window_type = 'desktop'"
];

#################################
#             Blur              #
#################################

blur: {
  method = "dual_kawase";
  strength = 12;
  background = true;
  background-frame = false;
  background-fixed = false;
}
blur-background-exclude = [
  "window_type = 'dock'",
  "window_type = 'desktop'",
  "window_type = 'dnd'",
  "_GTK_FRAME_EXTENTS@:c",
  "class_g = 'Peek'",
  "class_g *?= 'slop'",
];

#################################
#       General Settings        #
#################################

# Daemonize process.
# daemon = false
backend = "glx"

# Use higher precision during rendering, and apply dither when presenting the
# rendered screen. Reduces banding artifacts, but might cause performance
# degradation. Only works with OpenGL.
dithered-present = true;

# Enable remote control via D-Bus. See the *D-BUS API* section below for more details.
# dbus = false

# Try to detect WM windows
mark-wmwin-focused = true;

# Mark override-redirect windows that doesn't have a child window with 'WM_STATE' focused.
mark-ovredir-focused = true;

# Use EWMH '_NET_ACTIVE_WINDOW' to determine currently focused window,
# rather than listening to 'FocusIn'/'FocusOut' event. Might have more accuracy,
use-ewmh-active-win = true;

# Unredirect all windows if a full-screen opaque window is detected,
unredir-if-possible = true;
unredir-if-possible-delay = 5

# Conditions of windows that shouldn't be considered full-screen for unredirecting screen.
# unredir-if-possible-exclude = []

# Use 'WM_TRANSIENT_FOR' to group windows, and consider windows
# in the same group focused at the same time.
detect-transient = true;

# Use 'WM_CLIENT_LEADER' to group windows, and consider windows in the same
# group focused at the same time. This usually means windows from the same application
# will be considered focused or unfocused at the same time.
detect-client-leader = true

# Resize damaged region by a specific number of pixels.
# A positive value enlarges it while a negative one shrinks it.
# If the value is positive, those additional pixels will not be actually painted
# to screen, only used in blur calculation, and such. (Due to technical limitations,
# with use-damage, those pixels will still be incorrectly painted to screen.)
# Primarily used to fix the line corruption issues of blur,
# in which case you should use the blur radius value here
# (e.g. with a 3x3 kernel, you should use `--resize-damage 1`,
# with a 5x5 one you use `--resize-damage 2`, and so on).
# May or may not work with *--glx-no-stencil*. Shrinking doesn't function correctly.
# resize-damage = 1

# GLX backend: Avoid using stencil buffer, useful if you don't have a stencil buffer.
# Might cause incorrect opacity when rendering transparent content (but never
# practically happened) and may not work with blur-background.
# My tests show a 15% performance boost. Recommended.
glx-no-stencil = true;

# GLX backend: Avoid rebinding pixmap on window damage.
# Probably could improve performance on rapid window content changes,
# Recommended if it works.
glx-no-rebind-pixmap = true;

# Disable the use of damage information.
# This cause the whole screen to be redrawn every time, instead of the part of the screen
# has actually changed. Potentially degrades the performance, but might fix some artifacts.
# The opposing option is use-damage
use-damage = false;

# Use X Sync fence to sync clients' draw calls, to make sure all draw
xrender-sync-fence = false;

# GLX backend: Use specified GLSL fragment shader for rendering window contents.
# See `compton-default-fshader-win.glsl` and `compton-fake-transparency-fshader-win.glsl`
window-shader-fg = "default";

# Force all windows to be painted with blending. Useful if you
# have a glx-fshader-win that could turn opaque pixels transparent.
force-win-blend = false;

# Make transparent windows clip other windows like non-transparent windows do,
# instead of blending on top of them.
# transparent-clipping = false;
# transparent-clipping-exclude = []

# Set the log level. Possible values are:
#  "trace", "debug", "info", "warn", "error"
# in increasing level of importance. Case doesn't matter.
# If using the "TRACE" log level, it's better to log into a file
# using *--log-file*, since it can generate a huge stream of logs.
#
# log-level = "debug"
log-level = "warn";
# log-file = "/path/to/your/log/file"

# Show all X errors (for debugging)
# show-all-xerrors = false

# Write process ID to a file.
# write-pid-path = "/path/to/your/log/file"

# Window type settings
#
# 'WINDOW_TYPE' is one of the 15 window types defined in EWMH standard:
#     "unknown", "desktop", "dock", "toolbar", "menu", "utility",
#     "splash", "dialog", "normal", "dropdown_menu", "popup_menu",
#     "tooltip", "notification", "combo", and "dnd".
#
# Following per window-type options are available: ::
#
#   fade, shadow:::
#     Controls window-type-specific shadow and fade settings.
#
#   opacity:::
#     Controls default opacity of the window type.
#
#   focus:::
#     Controls whether the window of this type is to be always considered focused.
#     (By default, all window types except "normal" and "dialog" has this on.)
#
#   full-shadow:::
#     Controls whether shadow is drawn under the parts of the window that you
#     normally won't be able to see. Useful when the window has parts of it
#     transparent, and you want shadows in those areas.
#
#   clip-shadow-above:::
#     Controls whether shadows that would have been drawn above the window should
#     be clipped. Useful for dock windows that should have no shadow painted on top.
#
#   redir-ignore:::
#     Controls whether this type of windows should cause screen to become
#     redirected again after been unredirected. If you have unredir-if-possible
#     set, and doesn't want certain window to cause unnecessary screen redirection,
#     you can set this to `true`.
#
wintypes:
{
	dock = { clip-shadow-above = false; full-shadow = true; animation = "slide-down"; };
	notification = { full-shadow = true; clip-shadow-above = false; animation = "slide-left"; };
	tooltip = { full-shadow = true; focus = false; animation = "slide-down"; };
	menu = { full-shadow = false; opacity = 0.8; animation = "slide-down";};
	popup_menu =  { full-shadow = false; opacity = 0.8;};
	dropdown_menu = { full-shadow = false; opacity = 0.8; animation = "slide-down"; };
	utility =  {full-shadow = true;};
	toolbar = {full-shadow = true;};
	normal = { full-shadow = false; };
	dialog = {full-shadow = true; opacity: 0.8;};
  dnd = { shadow = false; }
};

